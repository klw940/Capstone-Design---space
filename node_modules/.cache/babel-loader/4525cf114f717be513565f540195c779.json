{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActionButtonStyle = exports.TabListStyle = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _templateObject = _taggedTemplateLiteral(['\\n  background-color: white;\\n  text-align: left;\\n  position: relative;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  width: auto;\\n  padding: ', ';\\n'], ['\\n  background-color: white;\\n  text-align: left;\\n  position: relative;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  width: auto;\\n  padding: ', ';\\n']),\n    _templateObject2 = _taggedTemplateLiteral(['\\n  overflow: hidden;\\n'], ['\\n  overflow: hidden;\\n']),\n    _templateObject3 = _taggedTemplateLiteral(['\\n  padding-left: 0;\\n  position: relative;\\n  margin: 0;\\n  list-style: none;\\n  display: inline-block;\\n  transition: transform .3s cubic-bezier(.42, 0, .58, 1);\\n'], ['\\n  padding-left: 0;\\n  position: relative;\\n  margin: 0;\\n  list-style: none;\\n  display: inline-block;\\n  transition: transform .3s cubic-bezier(.42, 0, .58, 1);\\n']),\n    _templateObject4 = _taggedTemplateLiteral(['\\n  height: 100%;\\n  width ', 'px;\\n  text-align: center;\\n  border: 1px solid #d9d9d9;\\n  border-bottom: 0;\\n  border-radius: 4px 4px 0 0;\\n  background: #f9f9f9;\\n  > svg {\\n    padding-top: 11px;\\n  }\\n'], ['\\n  height: 100%;\\n  width ', 'px;\\n  text-align: center;\\n  border: 1px solid #d9d9d9;\\n  border-bottom: 0;\\n  border-radius: 4px 4px 0 0;\\n  background: #f9f9f9;\\n  > svg {\\n    padding-top: 11px;\\n  }\\n']),\n    _templateObject5 = _taggedTemplateLiteral(['\\n  display: inline-block;\\n  filter: none;\\n  position: absolute;\\n  ', ';\\n  &:hover {\\n    cursor: pointer;\\n  }\\n'], ['\\n  display: inline-block;\\n  filter: none;\\n  position: absolute;\\n  ', ';\\n  &:hover {\\n    cursor: pointer;\\n  }\\n']),\n    _templateObject6 = _taggedTemplateLiteral(['\\n  display: inline-block;\\n  filter: none;\\n  position: absolute;\\n  left: 0;\\n  &:hover {\\n    cursor: pointer;\\n  }\\n'], ['\\n  display: inline-block;\\n  filter: none;\\n  position: absolute;\\n  left: 0;\\n  &:hover {\\n    cursor: pointer;\\n  }\\n']);\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _styledComponents = require('styled-components');\n\nvar _styledComponents2 = _interopRequireDefault(_styledComponents);\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _IconSvg = require('./IconSvg');\n\nvar _isType = require('./utils/isType');\n\nvar _TabModal = require('./TabModal');\n\nvar _TabModal2 = _interopRequireDefault(_TabModal);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nvar buttonWidth = 35;\n\nvar getPadding = function getPadding(_ref) {\n  var showModalButton = _ref.showModalButton,\n      showArrowButton = _ref.showArrowButton;\n  var paddingLeft = 0;\n  var paddingRight = 0;\n\n  if (showModalButton) {\n    paddingLeft += buttonWidth;\n  }\n\n  if (showArrowButton) {\n    paddingLeft += buttonWidth;\n    paddingRight += buttonWidth;\n\n    if (showModalButton) {\n      paddingLeft += 2;\n    }\n  }\n\n  if (paddingLeft > 0) {\n    paddingLeft += 3;\n  }\n\n  if (paddingRight > 0) {\n    paddingRight += 3;\n  }\n\n  return '0 ' + paddingRight + 'px 0 ' + paddingLeft + 'px';\n};\n\nvar TabListStyle = _styledComponents2.default.div(_templateObject, function (props) {\n  return getPadding(props);\n});\n\nvar ListInner = _styledComponents2.default.div(_templateObject2);\n\nvar ListScroll = _styledComponents2.default.ul(_templateObject3);\n\nvar ActionButtonStyle = _styledComponents2.default.div(_templateObject4, buttonWidth);\n\nvar makeScrollButton = function makeScrollButton(ActionButton) {\n  return (0, _styledComponents2.default)(ActionButton)(_templateObject5, function (props) {\n    return props.left ? props.showModalButton ? 'left: ' + (buttonWidth + 2) + 'px' : 'left: 0' : 'right: 0';\n  });\n};\n\nvar makeFoldButton = function makeFoldButton(ActionButton) {\n  return (0, _styledComponents2.default)(ActionButton)(_templateObject6);\n};\n\nvar TabListComponent = function (_React$Component) {\n  _inherits(TabListComponent, _React$Component);\n\n  function TabListComponent(props) {\n    _classCallCheck(this, TabListComponent);\n\n    var _this = _possibleConstructorReturn(this, (TabListComponent.__proto__ || Object.getPrototypeOf(TabListComponent)).call(this, props));\n\n    _this.handleScroll = _this.handleScroll.bind(_this);\n    _this.toggleModal = _this.toggleModal.bind(_this);\n    _this.renderTabs = _this.renderTabs.bind(_this);\n    _this.renderArrowButton = _this.renderArrowButton.bind(_this);\n    _this.isShowModalButton = _this.isShowModalButton.bind(_this);\n    _this.isShowArrowButton = _this.isShowArrowButton.bind(_this);\n    _this.scrollPosition = 0;\n    _this.tabRefs = [];\n    _this.state = {\n      modalIsOpen: false,\n      showArrowButton: false,\n      showModalButton: false\n    };\n    return _this;\n  }\n\n  _createClass(TabListComponent, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.isShowArrowButton();\n      this.isShowModalButton();\n      if (this.props.activeIndex > 0) this.scrollToIndex(this.props.activeIndex, 'left');\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.children.length !== this.props.children.length) {\n        this.isShowArrowButton();\n        this.isShowModalButton();\n      }\n\n      if (prevProps.activeIndex !== this.props.activeIndex) {\n        //if we scroll to the last tab, alignment is set to the right side of the tab\n        var rectSide = this.props.activeIndex === this.props.children.length - 1 ? 'right' : 'left';\n        this.scrollToIndex(this.props.activeIndex, rectSide);\n      } // if prev state show arrow button, and current state doesn't show\n      // need to reset the scroll position, or some tabs will be hided by container.\n\n\n      if (prevState.showArrowButton && !this.state.showArrowButton) {\n        this.scrollToZero();\n      }\n\n      if (prevProps.showModalButton !== this.props.showModalButton) {\n        this.isShowModalButton();\n      }\n\n      if (prevProps.showArrowButton !== this.props.showArrowButton) {\n        this.isShowArrowButton();\n      }\n    }\n  }, {\n    key: 'getTabNode',\n    value: function getTabNode(tab) {\n      if (tab.__INTERNAL_NODE) {\n        // normal tab\n        return tab.__INTERNAL_NODE;\n      } else if (tab.__DRAG_TAB_INTERNAL_NODE) {\n        // drag tab\n        return tab.__DRAG_TAB_INTERNAL_NODE.node;\n      }\n    }\n  }, {\n    key: 'unifyScrollMax',\n    value: function unifyScrollMax(width) {\n      return parseFloat(width / 3 * 2);\n    }\n  }, {\n    key: 'handleScroll',\n    value: function handleScroll(direction) {\n      var leftMove = 0;\n      var containerOffset = this.listContainer.getBoundingClientRect();\n      var containerWidth = this.listContainer.offsetWidth;\n      var tabFirstOffset = this.getTabNode(this.tabRefs[0]).getBoundingClientRect();\n      var tabLastOffset = this.getTabNode(this.tabRefs[this.tabRefs.length - 1]).getBoundingClientRect();\n\n      if (direction === 'right') {\n        leftMove = tabLastOffset.right - containerOffset.right;\n\n        if (leftMove > containerWidth) {\n          leftMove = this.unifyScrollMax(containerWidth);\n        }\n      } else if (direction === 'left') {\n        leftMove = tabFirstOffset.left - containerOffset.left;\n\n        if (-leftMove > containerWidth) {\n          leftMove = -this.unifyScrollMax(containerWidth);\n        }\n      }\n\n      this.scrollPosition += leftMove;\n\n      if (this.scrollPosition < 0) {\n        this.scrollPosition = 0;\n      }\n\n      this.listScroll.style.transform = 'translate3d(-' + this.scrollPosition + 'px, 0, 0)';\n    } // $FlowFixMe\n\n  }, {\n    key: 'scrollToIndex',\n    value: function scrollToIndex(index, rectSide) {\n      var tabOffset = this.getTabNode(this.tabRefs[index]).getBoundingClientRect();\n      var containerOffset = this.listContainer.getBoundingClientRect(); // Cancel scrolling if the tab is visible\n\n      if (tabOffset.right < containerOffset.right && tabOffset.left > containerOffset.left) return;\n      var leftMove = tabOffset[rectSide] - containerOffset[rectSide];\n      this.scrollPosition += leftMove;\n\n      if (this.scrollPosition < 0) {\n        this.scrollPosition = 0;\n      }\n\n      this.listScroll.style.transform = 'translate3d(-' + this.scrollPosition + 'px, 0, 0)';\n    }\n  }, {\n    key: 'scrollToZero',\n    value: function scrollToZero() {\n      this.listScroll.style.transform = 'translate3d(0, 0, 0)';\n    }\n  }, {\n    key: 'toggleModal',\n    value: function toggleModal(open) {\n      var _this2 = this;\n\n      this.setState({\n        modalIsOpen: open\n      }, function () {\n        if (!open) {\n          // $FlowFixMe\n          _this2.scrollToIndex(_this2.props.activeIndex, 'right');\n        }\n      });\n    }\n  }, {\n    key: 'isShowModalButton',\n    value: function isShowModalButton() {\n      var showModalButton = this.props.showModalButton;\n\n      if ((0, _isType.isNumber)(showModalButton)) {\n        // $FlowFixMe, weired. currently set showModalButton as number | bool, but don't know why flow only can recognize it as bool\n        showModalButton = this.props.children.length >= showModalButton;\n      }\n\n      this.setState({\n        showModalButton: showModalButton\n      });\n    }\n  }, {\n    key: 'isShowArrowButton',\n    value: function isShowArrowButton() {\n      var showArrowButton = this.props.showArrowButton;\n\n      if (showArrowButton === 'auto') {\n        var tabWidth = 0;\n        var containerWidth = this.listContainer.offsetWidth;\n        showArrowButton = false;\n\n        for (var index = 0; index < this.tabRefs.length; index++) {\n          var tab = this.getTabNode(this.tabRefs[index]);\n          tabWidth += tab.offsetWidth;\n\n          if (tabWidth >= containerWidth) {\n            showArrowButton = true;\n            break;\n          }\n        }\n      } // $FlowFixMe: flow will show 'auto' is not bool, but with this logic, showArrowButton will never be 'auto'\n\n\n      this.setState({\n        showArrowButton: showArrowButton\n      });\n    }\n  }, {\n    key: 'renderTabs',\n    value: function renderTabs() {\n      var _this3 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var isModal = arguments[1];\n      var _props = this.props,\n          children = _props.children,\n          activeIndex = _props.activeIndex,\n          handleTabChange = _props.handleTabChange,\n          handleEdit = _props.handleEdit,\n          customStyle = _props.customStyle;\n      var props = {\n        handleTabChange: handleTabChange,\n        handleEdit: handleEdit,\n        //$FlowFixMe\n        CustomTabStyle: customStyle.Tab\n      };\n\n      if (!isModal) {\n        this.tabRefs = [];\n      }\n\n      return React.Children.map(children, function (child, index) {\n        return React.cloneElement(child, _extends({\n          key: index,\n          active: index === activeIndex,\n          index: index,\n          tabIndex: index,\n          ref: function ref(node) {\n            if (!isModal && node) {\n              _this3.tabRefs.push(node);\n            }\n          }\n        }, props, options));\n      });\n    }\n  }, {\n    key: 'renderArrowButton',\n    value: function renderArrowButton(ScrollButton) {\n      var _this4 = this;\n\n      var showArrowButton = this.state.showArrowButton;\n\n      if (showArrowButton) {\n        return React.createElement('div', null, React.createElement(ScrollButton, {\n          left: true,\n          onClick: function onClick() {\n            _this4.handleScroll('left');\n          },\n          ref: function ref(node) {\n            return _this4.leftArrowNode = node;\n          },\n          showModalButton: this.state.showModalButton\n        }, React.createElement(_IconSvg.LeftIcon, null)), React.createElement(ScrollButton, {\n          onClick: function onClick() {\n            _this4.handleScroll('right');\n          },\n          ref: function ref(node) {\n            return _this4.rightArrowNode = node;\n          }\n        }, React.createElement(_IconSvg.RightIcon, null)));\n      }\n\n      return null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n\n      var _props2 = this.props,\n          customStyle = _props2.customStyle,\n          activeIndex = _props2.activeIndex,\n          handleTabChange = _props2.handleTabChange,\n          handleTabSequence = _props2.handleTabSequence,\n          ExtraButton = _props2.ExtraButton;\n      var modalIsOpen = this.state.modalIsOpen;\n      var TabList = customStyle.TabList || TabListStyle;\n      var ActionButton = customStyle.ActionButton || ActionButtonStyle;\n      var ScrollButton = makeScrollButton(ActionButton);\n      var FoldButton = makeFoldButton(ActionButton);\n      (0, _invariant2.default)(this.props.children, 'React-tabtab Error: You MUST pass at least one tab');\n      return React.createElement('div', null, ExtraButton ? ExtraButton : null, React.createElement(TabList, {\n        hasExtraButton: !!ExtraButton,\n        showModalButton: this.state.showModalButton,\n        showArrowButton: this.state.showArrowButton\n      }, this.state.showModalButton ? React.createElement(FoldButton, {\n        ref: function ref(node) {\n          return _this5.foldNode = node;\n        },\n        onClick: this.toggleModal.bind(this, true),\n        showArrowButton: this.state.showArrowButton\n      }, React.createElement(_IconSvg.BulletIcon, null)) : null, this.renderArrowButton(ScrollButton), React.createElement(ListInner, {\n        ref: function ref(node) {\n          return _this5.listContainer = node;\n        }\n      }, React.createElement(ListScroll, {\n        ref: function ref(node) {\n          return _this5.listScroll = node;\n        },\n        role: 'tablist'\n      }, this.renderTabs()))), modalIsOpen ? React.createElement(_TabModal2.default, {\n        closeModal: this.toggleModal.bind(this, false),\n        handleTabSequence: handleTabSequence,\n        handleTabChange: handleTabChange,\n        activeIndex: activeIndex\n      }, this.renderTabs({\n        vertical: true\n      }, true)) : null);\n    }\n  }]);\n\n  return TabListComponent;\n}(React.Component);\n\nexports.default = TabListComponent;\nTabListComponent.displayName = 'TabList';\nexports.TabListStyle = TabListStyle;\nexports.ActionButtonStyle = ActionButtonStyle;","map":null,"metadata":{},"sourceType":"script"}