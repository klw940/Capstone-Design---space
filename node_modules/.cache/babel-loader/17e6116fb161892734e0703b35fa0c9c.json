{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _find = require('lodash/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _sortBy = require('lodash/sortBy');\n\nvar _sortBy2 = _interopRequireDefault(_sortBy);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Manager = function () {\n  function Manager() {\n    _classCallCheck(this, Manager);\n\n    this.refs = {};\n  }\n\n  _createClass(Manager, [{\n    key: 'add',\n    value: function add(collection, ref) {\n      if (!this.refs[collection]) {\n        this.refs[collection] = [];\n      }\n\n      this.refs[collection].push(ref);\n    }\n  }, {\n    key: 'remove',\n    value: function remove(collection, ref) {\n      var index = this.getIndex(collection, ref);\n\n      if (index !== -1) {\n        this.refs[collection].splice(index, 1);\n      }\n    }\n  }, {\n    key: 'isActive',\n    value: function isActive() {\n      return this.active;\n    }\n  }, {\n    key: 'getActive',\n    value: function getActive() {\n      var _this = this;\n\n      return (0, _find2.default)(this.refs[this.active.collection], // eslint-disable-next-line eqeqeq\n      function (_ref) {\n        var node = _ref.node;\n        return node.sortableInfo.index == _this.active.index;\n      });\n    }\n  }, {\n    key: 'getIndex',\n    value: function getIndex(collection, ref) {\n      return this.refs[collection].indexOf(ref);\n    }\n  }, {\n    key: 'getOrderedRefs',\n    value: function getOrderedRefs() {\n      var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active.collection;\n      return (0, _sortBy2.default)(this.refs[collection], function (_ref2) {\n        var node = _ref2.node;\n        return node.sortableInfo.index;\n      });\n    }\n  }]);\n\n  return Manager;\n}();\n\nexports.default = Manager;","map":null,"metadata":{},"sourceType":"script"}